// backend/scripts/createIndexes.js
// Script para crear √≠ndices optimizados en MongoDB para mejorar el rendimiento

require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../models/User');
const Product = require('../models/Product');
const Order = require('../models/Order');

async function createIndexes() {
  try {
    console.log('üîó Conectando a MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');

    console.log('\nüìä Creando √≠ndices para optimizaci√≥n de consultas...\n');

    // ==========================================
    // √çNDICES PARA EL MODELO USER
    // ==========================================
    console.log('üë§ Creando √≠ndices para Users...');
    
    // √çndice √∫nico para email (consulta m√°s frecuente)
    await User.collection.createIndex(
      { email: 1 },
      { 
        unique: true, 
        name: 'email_unique_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice √∫nico en email');

    // √çndice para b√∫squedas por email verificado
    await User.collection.createIndex(
      { email: 1, isEmailVerified: 1 },
      { 
        name: 'email_verified_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice compuesto email + isEmailVerified');

    // √çndice para administradores
    await User.collection.createIndex(
      { isAdmin: 1 },
      { 
        name: 'admin_idx',
        background: true,
        sparse: true  // Solo indexa documentos donde isAdmin existe
      }
    );
    console.log('   ‚úÖ √çndice para isAdmin');

    // √çndice para c√≥digos de verificaci√≥n (TTL - expira autom√°ticamente)
    await User.collection.createIndex(
      { verificationCodeExpires: 1 },
      { 
        name: 'verification_code_ttl_idx',
        expireAfterSeconds: 0,  // Expira cuando el campo dice
        background: true
      }
    );
    console.log('   ‚úÖ √çndice TTL para c√≥digos de verificaci√≥n');

    // ==========================================
    // √çNDICES PARA EL MODELO PRODUCT
    // ==========================================
    console.log('\nüõçÔ∏è Creando √≠ndices para Products...');

    // √çndice para categor√≠a (filtro muy frecuente)
    await Product.collection.createIndex(
      { category: 1 },
      { 
        name: 'category_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice en category');

    // √çndice compuesto para categor√≠a + precio (ordenamiento frecuente)
    await Product.collection.createIndex(
      { category: 1, price: 1 },
      { 
        name: 'category_price_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice compuesto category + price');

    // √çndice para productos en stock
    await Product.collection.createIndex(
      { stock: 1 },
      { 
        name: 'stock_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice en stock');

    // √çndice de texto para b√∫squedas
    await Product.collection.createIndex(
      { 
        name: 'text', 
        description: 'text',
        category: 'text'
      },
      { 
        name: 'product_text_search_idx',
        background: true,
        weights: {
          name: 10,        // Mayor peso al nombre
          category: 5,     // Peso medio a categor√≠a
          description: 1   // Menor peso a descripci√≥n
        }
      }
    );
    console.log('   ‚úÖ √çndice de texto para b√∫squedas');

    // √çndice para ordenamiento por fecha de creaci√≥n
    await Product.collection.createIndex(
      { createdAt: -1 },
      { 
        name: 'created_at_desc_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice en createdAt (descendente)');

    // √çndice para productos activos por rating
    await Product.collection.createIndex(
      { rating: -1, stock: 1 },
      { 
        name: 'rating_stock_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice compuesto rating + stock');

    // ==========================================
    // √çNDICES PARA EL MODELO ORDER
    // ==========================================
    console.log('\nüì¶ Creando √≠ndices para Orders...');

    // √çndice para √≥rdenes por usuario (consulta muy frecuente)
    await Order.collection.createIndex(
      { user: 1 },
      { 
        name: 'user_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice en user');

    // √çndice compuesto para usuario + fecha (historial de √≥rdenes)
    await Order.collection.createIndex(
      { user: 1, createdAt: -1 },
      { 
        name: 'user_created_desc_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice compuesto user + createdAt');

    // √çndice para estado de pago
    await Order.collection.createIndex(
      { paymentStatus: 1 },
      { 
        name: 'payment_status_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice en paymentStatus');

    // √çndice para estado de orden
    await Order.collection.createIndex(
      { status: 1 },
      { 
        name: 'order_status_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice en status');

    // √çndice para ID de pago de MercadoPago
    await Order.collection.createIndex(
      { mercadoPagoPaymentId: 1 },
      { 
        name: 'mercadopago_payment_idx',
        background: true,
        sparse: true  // Solo indexa cuando el campo existe
      }
    );
    console.log('   ‚úÖ √çndice en mercadoPagoPaymentId');

    // √çndice compuesto para reportes de administrador
    await Order.collection.createIndex(
      { paymentStatus: 1, createdAt: -1 },
      { 
        name: 'payment_status_date_idx',
        background: true 
      }
    );
    console.log('   ‚úÖ √çndice compuesto paymentStatus + createdAt');

    // ==========================================
    // VERIFICAR √çNDICES CREADOS
    // ==========================================
    console.log('\nüîç Verificando √≠ndices creados...\n');

    const userIndexes = await User.collection.listIndexes().toArray();
    console.log('üë§ Users - √çndices creados:', userIndexes.length);
    userIndexes.forEach(idx => console.log(`   - ${idx.name}`));

    const productIndexes = await Product.collection.listIndexes().toArray();
    console.log('\nüõçÔ∏è Products - √çndices creados:', productIndexes.length);
    productIndexes.forEach(idx => console.log(`   - ${idx.name}`));

    const orderIndexes = await Order.collection.listIndexes().toArray();
    console.log('\nüì¶ Orders - √çndices creados:', orderIndexes.length);
    orderIndexes.forEach(idx => console.log(`   - ${idx.name}`));

    console.log('\nüéâ ¬°Todos los √≠ndices creados exitosamente!');
    console.log('\nüìà Beneficios esperados:');
    console.log('   - B√∫squedas por email: 10-50x m√°s r√°pidas');
    console.log('   - Filtros por categor√≠a: 5-20x m√°s r√°pidas');
    console.log('   - B√∫squedas de texto: 20-100x m√°s r√°pidas');
    console.log('   - Consultas de √≥rdenes: 5-30x m√°s r√°pidas');
    console.log('   - Ordenamientos: 3-10x m√°s r√°pidos');

  } catch (error) {
    console.error('‚ùå Error creando √≠ndices:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Desconectado de MongoDB');
    process.exit(0);
  }
}

// Funci√≥n para eliminar √≠ndices (√∫til para development)
async function dropCustomIndexes() {
  try {
    console.log('üóëÔ∏è Eliminando √≠ndices personalizados...');
    
    const customIndexes = [
      'email_verified_idx', 'admin_idx', 'verification_code_ttl_idx',
      'category_idx', 'category_price_idx', 'stock_idx', 'product_text_search_idx',
      'created_at_desc_idx', 'rating_stock_idx',
      'user_idx', 'user_created_desc_idx', 'payment_status_idx', 
      'order_status_idx', 'mercadopago_payment_idx', 'payment_status_date_idx'
    ];

    await mongoose.connect(process.env.MONGODB_URI);

    for (const indexName of customIndexes) {
      try {
        await User.collection.dropIndex(indexName);
        console.log(`   ‚úÖ Eliminado ${indexName} de Users`);
      } catch (e) {
        // √çndice no existe, continuar
      }
      
      try {
        await Product.collection.dropIndex(indexName);
        console.log(`   ‚úÖ Eliminado ${indexName} de Products`);
      } catch (e) {
        // √çndice no existe, continuar
      }
      
      try {
        await Order.collection.dropIndex(indexName);
        console.log(`   ‚úÖ Eliminado ${indexName} de Orders`);
      } catch (e) {
        // √çndice no existe, continuar
      }
    }

    console.log('‚úÖ √çndices personalizados eliminados');
  } catch (error) {
    console.error('‚ùå Error eliminando √≠ndices:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// Ejecutar seg√∫n argumento de l√≠nea de comandos
const command = process.argv[2];
if (command === 'drop') {
  dropCustomIndexes();
} else {
  createIndexes();
}

module.exports = { createIndexes, dropCustomIndexes };